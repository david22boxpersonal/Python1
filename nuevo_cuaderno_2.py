# -*- coding: utf-8 -*-
"""Nuevo_cuaderno_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kDzEiyPuWs7xrQQt4UV0x8uG_snuO_aQ
"""



"""Se usaran las librerias:
panda
Los modulos o librerias se crearon por compañias para usar de forma gratuita., yo puedo crear un modulo y compartirlo.

Para importar modulos.
Como importar:
"""

## os, este permite navegar como si este en una consola de comandos

import os
## para ver donde estoy dentro de una carpeta,
os.getcwdb()

## para ver qeu hay en las carpetas, dentro de ellas:
os.listdir()

## para crear cartepas: Uso el metodo: siguiente
os.mkdir("CARPETA_N")

os.listdir()



"""USO DE DATAFREM:
activamos las bibliotecas: nompy & pandas se complementan pero son diferentes, para crear dataframe, usaremos la mas usada: lectura directa desde un archivo.
"""

## Opcion 1
import pandas as pd ## con sobrenobre pd
import numpy as np ## con sobrenombre pd

## la promer forma de crear un Darframe es ARRAY, y despues guardarlo en una variable.
dataframe_1= np.array([[2,4],[6,8],[10,12],[14,16]])

## usaremos pandas
pd.DataFrame(dataframe_1)

dataframe_2= np.array([[3,6,9],[12,15,18],[21,24,27],[30,0,0]])
pd.DataFrame(dataframe_2)

"""NJUVO"""

dfi=pd.DataFrame(dataframe_1, index=["fila_1","fila_2","fila_3","fila_4"],
                columns=["col1","col2"])

dfi

"""DOS: usando listas"""

dataframe_3=[[2,4],[6,8],[10,12]]
df3=pd.DataFrame(dataframe_3, index=["fila_1","fila_2","fila_3"],
                columns=["COL_1","COL_2"])

df3

"""Comnombres:"""

dataframe_4=[["David","Monroy",38],["Maria","Martinez",30],["Carlos","Perez",20]]
df4=pd.DataFrame(dataframe_4, index=["fila_1","fila_2","fila_3"],
                columns=["NOMBRE","APELLIDO","EDAD"])

df4

"""Para usar diccionarios:
s crearon dos listas puedo crear muchas listas, entendiendo que las listas son las colubnas ciudaddes colombia.




"""

ciudadescolombia=["Bogotá","MEdellin","cali"]
ciudadesinfo=[11000000, 2500000, 2200000]
#ahora los se crean los diccionarios con las listas:
ciudades={"CIUDADES":ciudadescolombia, "POBLACION":ciudadesinfo}

df5=pd.DataFrame(ciudades)
df5

ciudadescolombia=["Bogotá","MEdellin","cali"]
ciudadesinfo=[11000000, 2500000, 2200000]
Expectativa_de_vida=[75,70,65]
#ahora los se crean los diccionarios con las listas:
ciudades={"CIUDADES":ciudadescolombia, "POBLACION":ciudadesinfo, "EXPECTATIVA":Expectativa_de_vida}

df6=pd.DataFrame(ciudades)
df6

"""como subir dataframe: para hacer trabajos mas robustos. con poco codigo.

"""

## usamos pandas para leer
estudiantes=pd.read_csv("/content/drive/MyDrive/p_hyton/StudentsPerformance (1).csv")





estudiantes

estudiantes

estudiantes.tail()

estudiantes.head(10)

estudiantes.shape

estudiantes.head(20)

estudiantes.tail(2)

## metodos de pandas: ara ver el tamaño y el salto de los datos index
estudiantes.index

## para ver colubnas
estudiantes.columns

## para ver l tipo de dato:
estudiantes.dtypes

## para ver informacion:
estudiantes.info()

## medidas de tendencia central.
estudiantes.describe()

"""funciones de panda:"""

len(estudiantes)  ## para ver el numero de filas

"""# Nueva sección"""

max(estudiantes["math score"])

max(estudiantes.index)

round(estudiantes,2)

estudiantes["math score"]

## apra ver una sola colubna:
estudiantes["gender"]

estudiantes["gender"].index

estudiantes["gender"].values

estudiantes["gender"].value_counts()

from google.colab import drive
drive.mount('/content/drive')

estudiantes

##para saber que es ese dataframe uso la funcion type
type(estudiantes[["math score","reading score"]])

##
estudiantes[["math score","reading score","lunch"]]

## para crear colubnas hay dos formas: 1:
## el metodo mas usado es como llamarla colubna. crearemos una colubna que nos muestre una nota.

estudiantes

estudiantes['score Chemistry']=70
estudiantes

## puedo crear valores aleatorios con un arreglo de NUmpy y luego usarlo para ponerlo en una columba nueva.
np.arange(0,1000)

len(np.arange(0,1000))

nota_quimica=np.arange(0,1000)
estudiantes['Score Chemistry']=nota_quimica
estudiantes

#Así puedo crear arreglos aleatorios que me sirvan para diligenciar la tabla
aleatorio=np.random.randint(1,100,size=1000)

estudiantes['Score Chemistry']= aleatorio
estudiantes

## aleatorios con decimales
np.random.uniform(1,100, size=1000)

## agregar una colubna
estudiantes["incorrecta"]=0
estudiantes

estudiantes.drop(columns="incorrecta")

estudiantes